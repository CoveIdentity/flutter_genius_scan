// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6 (swiftlang-5.6.0.323.62 clang-1316.0.20.8)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name GSSDKScanFlow
import Foundation
import GSSDKOCR
@_exported import GSSDKScanFlow
import QuartzCore
import Swift
import UIKit
import _Concurrency
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor(unsafe) public class BVImageContentViewObjCWrapperView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc @_Concurrency.MainActor(unsafe) public func setImage(_ image: UIKit.UIImage)
  @objc @_Concurrency.MainActor(unsafe) public func setZoomLimits()
  @objc deinit
}
@_Concurrency.MainActor(unsafe) open class BVContentScrollView<ContentViewType> : UIKit.UIScrollView, UIKit.UIScrollViewDelegate where ContentViewType : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) final public let contentView: ContentViewType
  @_Concurrency.MainActor(unsafe) public var doubleTapRecognizer: UIKit.UITapGestureRecognizer! {
    get
  }
  @_Concurrency.MainActor(unsafe) public init(frame: CoreGraphics.CGRect, contentView: ContentViewType)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public var availableSize: CoreGraphics.CGSize {
    get
  }
  @_Concurrency.MainActor(unsafe) public var padding: CoreGraphics.CGFloat
  @_Concurrency.MainActor(unsafe) open var contentViewContentSize: CoreGraphics.CGSize {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var contentInset: UIKit.UIEdgeInsets {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var bounds: CoreGraphics.CGRect {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) public func setZoomLimits()
  @objc @_Concurrency.MainActor(unsafe) open func handleDoubleTap(_ gestureRecognizer: UIKit.UITapGestureRecognizer)
  @_Concurrency.MainActor(unsafe) @objc public func viewForZooming(in scrollView: UIKit.UIScrollView) -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) @objc public func scrollViewDidEndZooming(_ scrollView: UIKit.UIScrollView, with view: UIKit.UIView?, atScale scale: CoreGraphics.CGFloat)
  @_Concurrency.MainActor(unsafe) @objc open func scrollViewDidZoom(_ scrollView: UIKit.UIScrollView)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc final public class GSKUIOCRService : ObjectiveC.NSObject {
  @objc public static let shared: GSSDKScanFlow.GSKUIOCRService
  @objc final public var pendingCount: Swift.Int {
    get
  }
  @objc final public func process(_ scan: GSSDKScanFlow.GSKScanFlowScan, configuration: GSSDKOCR.GSKOCRConfiguration)
  @objc final public func waitForCompletion(_ onDone: @escaping () -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc final public class GSKUIBackgroundProcessing : ObjectiveC.NSObject {
  @objc public static let shared: GSSDKScanFlow.GSKUIBackgroundProcessing
  @objc final public let documentGenerationQueue: Dispatch.DispatchQueue
  @objc override dynamic public init()
  @objc deinit
}
